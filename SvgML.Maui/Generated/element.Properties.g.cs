// <auto-generated />
#nullable enable

namespace SvgML;

public abstract partial class element : SkiaSharp.Views.Maui.Controls.SKCanvasView
{
    protected abstract string SvgTag { get; }

    public static readonly Microsoft.Maui.Controls.BindableProperty styleProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("style", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty colorProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("color", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty transformProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("transform", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty idProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("id", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty spProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("sp", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onclickProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onclick", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmousedownProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmousedown", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmouseupProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmouseup", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmousemoveProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmousemove", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmousescrollProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmousescroll", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmouseoverProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmouseover", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty onmouseoutProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("onmouseout", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty fillProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("fill", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty strokeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty fill_ruleProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("fill-rule", typeof(fill_rule), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty fill_opacityProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("fill-opacity", typeof(float), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_widthProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-width", typeof(Svg.SvgUnit), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_linecapProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-linecap", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_linejoinProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-linejoin", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_miterlimitProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-miterlimit", typeof(float), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_dasharrayProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-dasharray", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_dashoffsetProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-dashoffset", typeof(Svg.SvgUnit), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty stroke_opacityProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("stroke-opacity", typeof(float), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty opacityProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("opacity", typeof(float), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty shape_renderingProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("shape-rendering", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty color_interpolationProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("color-interpolation", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty color_interpolation_filtersProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("color-interpolation-filters", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty visibilityProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("visibility", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty displayProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("display", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty text_anchorProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("text-anchor", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty baseline_shiftProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("baseline-shift", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_familyProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-family", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_sizeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-size", typeof(Svg.SvgUnit), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_styleProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-style", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_variantProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-variant", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty text_decorationProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("text-decoration", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_weightProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-weight", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty font_stretchProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font-stretch", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty text_transformProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("text-transform", typeof(string), typeof(element));

    public static readonly Microsoft.Maui.Controls.BindableProperty fontProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("font", typeof(string), typeof(element));

    public string style
    {
        get => (string)GetValue(styleProperty);
        set => SetValue(styleProperty, value);
    }

    public string color
    {
        get => (string)GetValue(colorProperty);
        set => SetValue(colorProperty, value);
    }

    public string transform
    {
        get => (string)GetValue(transformProperty);
        set => SetValue(transformProperty, value);
    }

    public string id
    {
        get => (string)GetValue(idProperty);
        set => SetValue(idProperty, value);
    }

    public string sp
    {
        get => (string)GetValue(spProperty);
        set => SetValue(spProperty, value);
    }

    public string onclick
    {
        get => (string)GetValue(onclickProperty);
        set => SetValue(onclickProperty, value);
    }

    public string onmousedown
    {
        get => (string)GetValue(onmousedownProperty);
        set => SetValue(onmousedownProperty, value);
    }

    public string onmouseup
    {
        get => (string)GetValue(onmouseupProperty);
        set => SetValue(onmouseupProperty, value);
    }

    public string onmousemove
    {
        get => (string)GetValue(onmousemoveProperty);
        set => SetValue(onmousemoveProperty, value);
    }

    public string onmousescroll
    {
        get => (string)GetValue(onmousescrollProperty);
        set => SetValue(onmousescrollProperty, value);
    }

    public string onmouseover
    {
        get => (string)GetValue(onmouseoverProperty);
        set => SetValue(onmouseoverProperty, value);
    }

    public string onmouseout
    {
        get => (string)GetValue(onmouseoutProperty);
        set => SetValue(onmouseoutProperty, value);
    }

    public string fill
    {
        get => (string)GetValue(fillProperty);
        set => SetValue(fillProperty, value);
    }

    public string stroke
    {
        get => (string)GetValue(strokeProperty);
        set => SetValue(strokeProperty, value);
    }

    public fill_rule fill_rule
    {
        get => (fill_rule)GetValue(fill_ruleProperty);
        set => SetValue(fill_ruleProperty, value);
    }

    public float fill_opacity
    {
        get => (float)GetValue(fill_opacityProperty);
        set => SetValue(fill_opacityProperty, value);
    }

    public Svg.SvgUnit stroke_width
    {
        get => (Svg.SvgUnit)GetValue(stroke_widthProperty);
        set => SetValue(stroke_widthProperty, value);
    }

    public string stroke_linecap
    {
        get => (string)GetValue(stroke_linecapProperty);
        set => SetValue(stroke_linecapProperty, value);
    }

    public string stroke_linejoin
    {
        get => (string)GetValue(stroke_linejoinProperty);
        set => SetValue(stroke_linejoinProperty, value);
    }

    public float stroke_miterlimit
    {
        get => (float)GetValue(stroke_miterlimitProperty);
        set => SetValue(stroke_miterlimitProperty, value);
    }

    public string stroke_dasharray
    {
        get => (string)GetValue(stroke_dasharrayProperty);
        set => SetValue(stroke_dasharrayProperty, value);
    }

    public Svg.SvgUnit stroke_dashoffset
    {
        get => (Svg.SvgUnit)GetValue(stroke_dashoffsetProperty);
        set => SetValue(stroke_dashoffsetProperty, value);
    }

    public float stroke_opacity
    {
        get => (float)GetValue(stroke_opacityProperty);
        set => SetValue(stroke_opacityProperty, value);
    }

    public float opacity
    {
        get => (float)GetValue(opacityProperty);
        set => SetValue(opacityProperty, value);
    }

    public string shape_rendering
    {
        get => (string)GetValue(shape_renderingProperty);
        set => SetValue(shape_renderingProperty, value);
    }

    public string color_interpolation
    {
        get => (string)GetValue(color_interpolationProperty);
        set => SetValue(color_interpolationProperty, value);
    }

    public string color_interpolation_filters
    {
        get => (string)GetValue(color_interpolation_filtersProperty);
        set => SetValue(color_interpolation_filtersProperty, value);
    }

    public string visibility
    {
        get => (string)GetValue(visibilityProperty);
        set => SetValue(visibilityProperty, value);
    }

    public string display
    {
        get => (string)GetValue(displayProperty);
        set => SetValue(displayProperty, value);
    }

    public string text_anchor
    {
        get => (string)GetValue(text_anchorProperty);
        set => SetValue(text_anchorProperty, value);
    }

    public string baseline_shift
    {
        get => (string)GetValue(baseline_shiftProperty);
        set => SetValue(baseline_shiftProperty, value);
    }

    public string font_family
    {
        get => (string)GetValue(font_familyProperty);
        set => SetValue(font_familyProperty, value);
    }

    public Svg.SvgUnit font_size
    {
        get => (Svg.SvgUnit)GetValue(font_sizeProperty);
        set => SetValue(font_sizeProperty, value);
    }

    public string font_style
    {
        get => (string)GetValue(font_styleProperty);
        set => SetValue(font_styleProperty, value);
    }

    public string font_variant
    {
        get => (string)GetValue(font_variantProperty);
        set => SetValue(font_variantProperty, value);
    }

    public string text_decoration
    {
        get => (string)GetValue(text_decorationProperty);
        set => SetValue(text_decorationProperty, value);
    }

    public string font_weight
    {
        get => (string)GetValue(font_weightProperty);
        set => SetValue(font_weightProperty, value);
    }

    public string font_stretch
    {
        get => (string)GetValue(font_stretchProperty);
        set => SetValue(font_stretchProperty, value);
    }

    public string text_transform
    {
        get => (string)GetValue(text_transformProperty);
        set => SetValue(text_transformProperty, value);
    }

    public string font
    {
        get => (string)GetValue(fontProperty);
        set => SetValue(fontProperty, value);
    }
}
