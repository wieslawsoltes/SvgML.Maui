// <auto-generated />
#nullable enable

namespace SvgML;

public abstract partial class text_base
{
    protected override void WriteAttributes(TextWriter writer, element parent)
    {
        base.WriteAttributes(writer, parent);

        if (this.IsSet(xProperty))
        {
            writer.WriteLine($"x=\"{ToSvgString(x)}\"");
        }

        if (this.IsSet(dxProperty))
        {
            writer.WriteLine($"dx=\"{ToSvgString(dx)}\"");
        }

        if (this.IsSet(yProperty))
        {
            writer.WriteLine($"y=\"{ToSvgString(y)}\"");
        }

        if (this.IsSet(dyProperty))
        {
            writer.WriteLine($"dy=\"{ToSvgString(dy)}\"");
        }

        if (this.IsSet(rotateProperty))
        {
            writer.WriteLine($"rotate=\"{ToSvgString(rotate)}\"");
        }

        if (this.IsSet(textLengthProperty))
        {
            writer.WriteLine($"textLength=\"{ToSvgString(textLength)}\"");
        }

        if (this.IsSet(lengthAdjustProperty))
        {
            writer.WriteLine($"lengthAdjust=\"{ToSvgString(lengthAdjust)}\"");
        }

        if (this.IsSet(letter_spacingProperty))
        {
            writer.WriteLine($"letter-spacing=\"{ToSvgString(letter_spacing)}\"");
        }

        if (this.IsSet(word_spacingProperty))
        {
            writer.WriteLine($"word-spacing=\"{ToSvgString(word_spacing)}\"");
        }

        if (this.IsSet(onchangeProperty))
        {
            writer.WriteLine($"onchange=\"{ToSvgString(onchange)}\"");
        }
    }
}
