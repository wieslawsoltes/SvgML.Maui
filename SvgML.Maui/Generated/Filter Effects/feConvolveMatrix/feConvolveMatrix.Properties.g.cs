// <auto-generated />
#nullable enable

namespace SvgML;

public partial class feConvolveMatrix : filter_primitive
{
    protected override string SvgTag => "feConvolveMatrix";

    public static readonly Microsoft.Maui.Controls.BindableProperty orderProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("order", typeof(numbers), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty kernelMatrixProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("kernelMatrix", typeof(numbers), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty divisorProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("divisor", typeof(float), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty biasProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("bias", typeof(float), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty targetXProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("targetX", typeof(int), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty targetYProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("targetY", typeof(int), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty edgeModeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("edgeMode", typeof(string), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty kernelUnitLengthProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("kernelUnitLength", typeof(numbers), typeof(feConvolveMatrix));

    public static readonly Microsoft.Maui.Controls.BindableProperty preserveAlphaProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("preserveAlpha", typeof(string), typeof(feConvolveMatrix));

    public numbers order
    {
        get => (numbers)GetValue(orderProperty);
        set => SetValue(orderProperty, value);
    }

    public numbers kernelMatrix
    {
        get => (numbers)GetValue(kernelMatrixProperty);
        set => SetValue(kernelMatrixProperty, value);
    }

    public float divisor
    {
        get => (float)GetValue(divisorProperty);
        set => SetValue(divisorProperty, value);
    }

    public float bias
    {
        get => (float)GetValue(biasProperty);
        set => SetValue(biasProperty, value);
    }

    public int targetX
    {
        get => (int)GetValue(targetXProperty);
        set => SetValue(targetXProperty, value);
    }

    public int targetY
    {
        get => (int)GetValue(targetYProperty);
        set => SetValue(targetYProperty, value);
    }

    public string edgeMode
    {
        get => (string)GetValue(edgeModeProperty);
        set => SetValue(edgeModeProperty, value);
    }

    public numbers kernelUnitLength
    {
        get => (numbers)GetValue(kernelUnitLengthProperty);
        set => SetValue(kernelUnitLengthProperty, value);
    }

    public string preserveAlpha
    {
        get => (string)GetValue(preserveAlphaProperty);
        set => SetValue(preserveAlphaProperty, value);
    }
}
