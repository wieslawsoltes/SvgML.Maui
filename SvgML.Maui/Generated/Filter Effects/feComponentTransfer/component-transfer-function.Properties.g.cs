// <auto-generated />
#nullable enable

namespace SvgML;

public abstract partial class component_transfer_function : element
{
    public static readonly Microsoft.Maui.Controls.BindableProperty typeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("type", typeof(type_component_transfer_function), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty tableValuesProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("tableValues", typeof(numbers), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty slopeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("slope", typeof(float), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty interceptProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("intercept", typeof(float), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty amplitudeProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("amplitude", typeof(float), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty exponentProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("exponent", typeof(float), typeof(component_transfer_function));

    public static readonly Microsoft.Maui.Controls.BindableProperty offsetProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("offset", typeof(float), typeof(component_transfer_function));

    public type_component_transfer_function type
    {
        get => (type_component_transfer_function)GetValue(typeProperty);
        set => SetValue(typeProperty, value);
    }

    public numbers tableValues
    {
        get => (numbers)GetValue(tableValuesProperty);
        set => SetValue(tableValuesProperty, value);
    }

    public float slope
    {
        get => (float)GetValue(slopeProperty);
        set => SetValue(slopeProperty, value);
    }

    public float intercept
    {
        get => (float)GetValue(interceptProperty);
        set => SetValue(interceptProperty, value);
    }

    public float amplitude
    {
        get => (float)GetValue(amplitudeProperty);
        set => SetValue(amplitudeProperty, value);
    }

    public float exponent
    {
        get => (float)GetValue(exponentProperty);
        set => SetValue(exponentProperty, value);
    }

    public float offset
    {
        get => (float)GetValue(offsetProperty);
        set => SetValue(offsetProperty, value);
    }
}
