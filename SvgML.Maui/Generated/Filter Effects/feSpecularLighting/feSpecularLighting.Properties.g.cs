// <auto-generated />
#nullable enable

namespace SvgML;

public partial class feSpecularLighting : filter_primitive
{
    protected override string SvgTag => "feSpecularLighting";

    public static readonly Microsoft.Maui.Controls.BindableProperty surfaceScaleProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("surfaceScale", typeof(float), typeof(feSpecularLighting));

    public static readonly Microsoft.Maui.Controls.BindableProperty specularConstantProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("specularConstant", typeof(float), typeof(feSpecularLighting));

    public static readonly Microsoft.Maui.Controls.BindableProperty specularExponentProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("specularExponent", typeof(float), typeof(feSpecularLighting));

    public static readonly Microsoft.Maui.Controls.BindableProperty kernelUnitLengthProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("kernelUnitLength", typeof(numbers), typeof(feSpecularLighting));

    public static readonly Microsoft.Maui.Controls.BindableProperty lighting_colorProperty = 
        Microsoft.Maui.Controls.BindableProperty.Create("lighting-color", typeof(string), typeof(feSpecularLighting));

    public float surfaceScale
    {
        get => (float)GetValue(surfaceScaleProperty);
        set => SetValue(surfaceScaleProperty, value);
    }

    public float specularConstant
    {
        get => (float)GetValue(specularConstantProperty);
        set => SetValue(specularConstantProperty, value);
    }

    public float specularExponent
    {
        get => (float)GetValue(specularExponentProperty);
        set => SetValue(specularExponentProperty, value);
    }

    public numbers kernelUnitLength
    {
        get => (numbers)GetValue(kernelUnitLengthProperty);
        set => SetValue(kernelUnitLengthProperty, value);
    }

    public string lighting_color
    {
        get => (string)GetValue(lighting_colorProperty);
        set => SetValue(lighting_colorProperty, value);
    }
}
